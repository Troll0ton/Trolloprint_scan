     1                                  ;-------------------------------------------------------------------------------------------------
     2                                  ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
     3                                  ;-------------------------------------------------------------------------------------------------
     4                                  %include "io.inc"
     5                              <1> ;-------------------------------------------------------------------------------------------------
     6                              <1> ;||||||||||||||||||||||||||||||||||||||||IO_UTILS|||||||||||||||||||||||||||||||||||||||||||||||||
     7                              <1> ;-------------------------------------------------------------------------------------------------
     8                              <1> ;                                      JUMP TABLE
     9                              <1> ;-------------------------------------------------------------------------------------------------
    10                              <1> jmp_table:
    11 00000000 [B800000000000000]  <1>                         dq bin_case                         ;b
    12 00000008 [D300000000000000]  <1>                         dq char_case                        ;c
    13 00000010 [0B01000000000000]  <1>                         dq int_case                         ;d
    14 00000018 [6801000000000000]- <1> times ('o' - 'd' - 1)   dq empty_case
    14 00000018 <rep Ah>            <1>
    15 00000068 [F000000000000000]  <1>                         dq unsint_case                      ;o
    16 00000070 [6801000000000000]- <1> times ('s' - 'o' - 1)   dq empty_case
    16 00000070 <rep 3h>            <1>
    17 00000088 [2701000000000000]  <1>                         dq str_case                         ;s
    18 00000090 [6801000000000000]- <1> times ('x' - 's' - 1)   dq empty_case
    18 00000090 <rep 4h>            <1>
    19 000000B0 [5001000000000000]  <1>                         dq hex_case                         ;x
    20                              <1> ;-------------------------------------------------------------------------------------------------
    21                              <1> ;                                     JUMP TARGETS
    22                              <1> ;-------------------------------------------------------------------------------------------------
    23                              <1> 
    24 000000B8 56                  <1> bin_case:               push rsi                            ; save regs value
    25 000000B9 57                  <1>                         push rdi
    26                              <1> 
    27 000000BA 31C0                <1>                         xor eax, eax
    28 000000BC 8B06                <1>                         mov eax, dword [rsi]                ; get curr num
    29 000000BE 50                  <1>                         push rax
    30 000000BF E816020000          <1>                         call _printbin                      ; call print num
    31 000000C4 4883C408            <1>                         add rsp, 8                          ; clear stk
    32                              <1> 
    33 000000C8 5F                  <1>                         pop rdi                             ; load saved regs
    34 000000C9 5E                  <1>                         pop rsi
    35 000000CA 4883C604            <1>                         add rsi, 4
    36                              <1> 
    37 000000CE E904010000          <1>                         jmp _handle_percent.home
    38                              <1> 
    39                              <1> ;-------------------------------------------------------------------------------------------------
    40                              <1> 
    41 000000D3 56                  <1> char_case:              push rsi                            ; save regs value
    42 000000D4 57                  <1>                         push rdi
    43                              <1> 
    44 000000D5 BA01000000          <1>                         mov rdx, 1                          ; get line len 
    45 000000DA B801000000          <1>                         mov rax, 1                          ; syswrite
    46 000000DF BF01000000          <1>                         mov rdi, 1                          ; stdout
    47 000000E4 0F05                <1>                         syscall
    48                              <1> 
    49 000000E6 5F                  <1>                         pop rdi                             ; load saved regs
    50 000000E7 5E                  <1>                         pop rsi
    51 000000E8 48FFC6              <1>                         inc rsi
    52                              <1> 
    53 000000EB E9E7000000          <1>                         jmp _handle_percent.home
    54                              <1> 
    55                              <1> ;-------------------------------------------------------------------------------------------------
    56                              <1> 
    57 000000F0 56                  <1> unsint_case:            push rsi                            ; save regs value
    58 000000F1 57                  <1>                         push rdi
    59                              <1> 
    60 000000F2 31C0                <1>                         xor eax, eax
    61 000000F4 8B06                <1>                         mov eax, dword [rsi]                ; get curr num
    62 000000F6 50                  <1>                         push rax
    63 000000F7 E8E0000000          <1>                         call _printunsint                   ; call print num
    64 000000FC 4883C408            <1>                         add rsp, 8                          ; clear stk
    65                              <1> 
    66 00000100 5F                  <1>                         pop rdi                             ; load saved regs
    67 00000101 5E                  <1>                         pop rsi
    68 00000102 4883C604            <1>                         add rsi, 4
    69                              <1> 
    70 00000106 E9CC000000          <1>                         jmp _handle_percent.home
    71                              <1> 
    72                              <1> ;-------------------------------------------------------------------------------------------------
    73                              <1> 
    74 0000010B 56                  <1> int_case:               push rsi                            ; save regs value
    75 0000010C 57                  <1>                         push rdi
    76                              <1> 
    77 0000010D 8B06                <1>                         mov eax, dword [rsi]                ; get curr num
    78 0000010F 4863C0              <1>                         movsx rax, eax
    79 00000112 50                  <1>                         push rax
    80 00000113 E816010000          <1>                         call _printint                      ; call print num
    81 00000118 4883C408            <1>                         add rsp, 8                          ; clear stk
    82                              <1> 
    83 0000011C 5F                  <1>                         pop rdi                             ; load saved regs
    84 0000011D 5E                  <1>                         pop rsi
    85 0000011E 4883C604            <1>                         add rsi, 4
    86                              <1> 
    87 00000122 E9B0000000          <1>                         jmp _handle_percent.home
    88                              <1> 
    89                              <1> ;-------------------------------------------------------------------------------------------------
    90                              <1> 
    91                              <1> str_case:               
    92                              <1> 
    93 00000127 8A26                <1> .next_sym:              mov ah, byte [rsi]                  ; check out end of str
    94 00000129 80FC0A              <1>                         cmp ah, 10
    95 0000012C 741A                <1>                         je .end
    96                              <1> 
    97 0000012E 56                  <1>                         push rsi                            ; save regs value
    98 0000012F 57                  <1>                         push rdi
    99                              <1> 
   100 00000130 BA01000000          <1>                         mov rdx, 1                          ; get line len 
   101 00000135 B801000000          <1>                         mov rax, 1                          ; syswrite
   102 0000013A BF01000000          <1>                         mov rdi, 1                          ; stdout
   103 0000013F 0F05                <1>                         syscall
   104                              <1> 
   105 00000141 5F                  <1>                         pop rdi                             ; load saved regs
   106 00000142 5E                  <1>                         pop rsi
   107                              <1> 
   108 00000143 48FFC6              <1>                         inc rsi
   109 00000146 EBDF                <1>                         jmp .next_sym
   110                              <1> 
   111 00000148 48FFC6              <1> .end                    inc rsi
   112                              <1> 
   113 0000014B E987000000          <1>                         jmp _handle_percent.home
   114                              <1> 
   115                              <1> ;-------------------------------------------------------------------------------------------------
   116                              <1> 
   117 00000150 56                  <1> hex_case:               push rsi                            ; save regs value
   118 00000151 57                  <1>                         push rdi
   119                              <1> 
   120 00000152 31C0                <1>                         xor eax, eax
   121 00000154 8B06                <1>                         mov eax, dword [rsi]                ; get curr num
   122 00000156 50                  <1>                         push rax
   123 00000157 E818010000          <1>                         call _printhex                      ; call print num
   124 0000015C 4883C408            <1>                         add rsp, 8                          ; clear stk
   125                              <1> 
   126 00000160 5F                  <1>                         pop rdi                             ; load saved regs
   127 00000161 5E                  <1>                         pop rsi
   128 00000162 4883C604            <1>                         add rsi, 4
   129                              <1> 
   130 00000166 EB6F                <1>                         jmp _handle_percent.home
   131                              <1> 
   132                              <1> ;-------------------------------------------------------------------------------------------------
   133                              <1> 
   134 00000168 EB6D                <1> empty_case:             jmp _handle_percent.home
   135                              <1> 
   136                              <1> ;=======================================MAIN_FUNCTION=============================================
   137                              <1> ;-------------------------------------------------------------------------------------------------
   138                              <1> ;   Printtrl (stdcall)             
   139                              <1> ;-------------------------------------------------------------------------------------------------
   140                              <1> ;   Needs:                  format line, args (stack)
   141                              <1> ;   Return:                 exit code in rax (0 - success)
   142                              <1> ;   Destroy list:           ???
   143                              <1> ;-------------------------------------------------------------------------------------------------
   144                              <1> ; RSI - ptr to args of printf
   145                              <1> ; RDI - ptr to format line
   146                              <1> ;-------------------------------------------------------------------------------------------------
   147                              <1> 
   148                              <1> global _printtrl 
   149 0000016A 55                  <1> _printtrl:  push rbp				 	
   150 0000016B 4889E5              <1>             mov rbp, rsp                                                   
   151                              <1> 
   152 0000016E 488B7D10            <1>             mov rdi, [rbp + 16]                 ; get ptr to format line
   153 00000172 488B7518            <1>             mov	rsi, [rbp + 24]                 ; get ptr to args
   154 00000176 B801000000          <1>             mov	rax, 1                          ; Non normal exit code (it changes in the end)
   155                              <1> 
   156 0000017B 8A27                <1> .next_sym:  mov ah, byte [rdi]
   157 0000017D 80FC0A              <1>             cmp ah, 10                          ; check end of line
   158 00000180 7432                <1>             je .finish                          ; end of print
   159                              <1> 
   160 00000182 80FC25              <1>             cmp ah, '%'                         ; check out %
   161 00000185 7510                <1>             jne .sym
   162                              <1> 
   163 00000187 48FFC7              <1>             inc rdi                             ; move to next sym in frmt line
   164 0000018A 56                  <1>             push rsi                            ; push args
   165 0000018B 57                  <1>             push rdi
   166 0000018C E828000000          <1>             call _handle_percent                ; Handle percent
   167 00000191 4883C410            <1>             add rsp, 16                         ; clear stk
   168 00000195 EB18                <1>             jmp .skip                           
   169                              <1> 
   170 00000197 56                  <1> .sym:       push rsi                            ; save regs value
   171 00000198 57                  <1>             push rdi
   172                              <1> 
   173 00000199 4889FE              <1>             mov rsi, rdi                        ; get ptr to str
   174 0000019C BA01000000          <1>             mov rdx, 1                          ; get line len 
   175 000001A1 B801000000          <1>             mov rax, 1                          ; syswrite
   176 000001A6 BF01000000          <1>             mov rdi, 1                          ; stdout
   177 000001AB 0F05                <1>             syscall
   178                              <1> 
   179 000001AD 5F                  <1>             pop rdi                             ; load saved regs
   180 000001AE 5E                  <1>             pop rsi
   181                              <1> 
   182 000001AF 48FFC7              <1> .skip       inc rdi
   183 000001B2 EBC7                <1>             jmp .next_sym                       ; mov until the end of line
   184                              <1> 
   185 000001B4 4889EC              <1> .finish:    mov rsp, rbp                        ; skip local data
   186 000001B7 5D                  <1>             pop rbp                             ; PROLOGUE
   187 000001B8 C3                  <1>             ret
   188                              <1> ;=================================================================================================
   189                              <1> ;-------------------------------------------------------------------------------------------------
   190                              <1> ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   191                              <1> ;-------------------------------------------------------------------------------------------------
   192                              <1> ;   handle_percent 
   193                              <1> ;-------------------------------------------------------------------------------------------------
   194                              <1> ;   Needs:                  curr ptr to format line, args (stack)
   195                              <1> ;   Return:                 ???
   196                              <1> ;   Destroy list:           ???
   197                              <1> ;-------------------------------------------------------------------------------------------------
   198                              <1> 
   199                              <1> _handle_percent:  
   200 000001B9 55                  <1>             push rbp                             ; PROLOGUE 
   201 000001BA 4889E5              <1>             mov rbp, rsp                         ;
   202                              <1> 
   203 000001BD 488B7D10            <1>             mov rdi, [rbp + 16]                  ; get ptr curr pos into format line
   204 000001C1 488B7518            <1>             mov	rsi, [rbp + 24]                  ; get ptr to args
   205                              <1> 
   206 000001C5 4831C0              <1>             xor rax, rax
   207 000001C8 8A07                <1>             mov al, byte [rdi]
   208                              <1> 
   209                              <1>             ;SUPER PUPER JUMP TABLE
   210                              <1>             
   211 000001CA 3C78                <1>             cmp al, 'x'
   212 000001CC 7709                <1>             ja .home
   213                              <1>             
   214 000001CE 2C62                <1>             sub al, 'b'
   215 000001D0 FF24C5[00000000]    <1>             jmp [jmp_table + rax*8]             ;inderect transit
   216                              <1> 
   217 000001D7 4889EC              <1> .home:      mov rsp, rbp                        ; skip local data          
   218 000001DA 5D                  <1>             pop rbp                             ; PROLOGUE 
   219 000001DB C3                  <1>             ret
   220                              <1> ;-------------------------------------------------------------------------------------------------
   221                              <1> ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   222                              <1> ;-------------------------------------------------------------------------------------------------
   223                              <1> ;   _printunsint (stdcall) - long long int 
   224                              <1> ;-------------------------------------------------------------------------------------------------
   225                              <1> ;   Needs:                  your number in stack
   226                              <1> ;   Return:                 none
   227                              <1> ;   Destroy list:           rax, rcx, rdx, r8, r9
   228                              <1> ;-------------------------------------------------------------------------------------------------
   229                              <1>  
   230                              <1> _printunsint:  
   231 000001DC 55                  <1>             push rbp                            ; PROLOGUE 
   232 000001DD 4889E5              <1>             mov rbp, rsp                        ;
   233                              <1> 
   234 000001E0 4883EC0F            <1>             sub rsp, 15                         ; reserve 15 bytes in stack
   235                              <1> 
   236 000001E4 488B4510            <1>             mov rax, [rbp+16]                   ; get num
   237 000001E8 B90A000000          <1>             mov ecx, 10                         ; base (10-sys-count)
   238 000001ED 4831D2              <1>             xor rdx, rdx
   239                              <1> 
   240 000001F0 4D31C9              <1>             xor r9, r9                          ; num len
   241 000001F3 4989E8              <1>             mov r8, rbp                         ; curr pos in array
   242 000001F6 49FFC8              <1>             dec r8
   243                              <1> 
   244                              <1> ; translate num to line
   245                              <1> 
   246 000001F9 F7F1                <1> .next_num:  div ecx
   247 000001FB 4883C230            <1>             add rdx, '0'                        ; save num
   248 000001FF 418810              <1>             mov byte [r8], dl
   249 00000202 49FFC8              <1>             dec r8                              ; mov to next number in our array
   250 00000205 49FFC1              <1>             inc r9
   251 00000208 4831D2              <1>             xor rdx, rdx  
   252 0000020B 4883F800            <1>             cmp rax, 0
   253 0000020F 77E8                <1>             ja .next_num  
   254                              <1> 
   255 00000211 49FFC0              <1>             inc r8
   256 00000214 4C89C9              <1>             mov rcx, r9
   257                              <1> 
   258 00000217 4C89C6              <1>             mov rsi, r8                         ; get ptr to text
   259 0000021A 4C89CA              <1>             mov rdx, r9                         ; get line len 
   260 0000021D B801000000          <1>             mov rax, 1                          ; out text
   261 00000222 BF01000000          <1>             mov rdi, 1       
   262 00000227 0F05                <1>             syscall 
   263                              <1> 
   264 00000229 4889EC              <1>             mov rsp, rbp                        ; PROLOGUE  
   265 0000022C 5D                  <1>             pop rbp                            
   266 0000022D C3                  <1>             ret
   267                              <1> ;-------------------------------------------------------------------------------------------------
   268                              <1> ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   269                              <1> ;-------------------------------------------------------------------------------------------------
   270                              <1> ;   _printint (stdcall) - long long int 
   271                              <1> ;-------------------------------------------------------------------------------------------------
   272                              <1> ;   Needs:                  your number in stack
   273                              <1> ;   Return:                 none
   274                              <1> ;   Destroy list:           rax, rcx, rdx, r8, r9
   275                              <1> ;-------------------------------------------------------------------------------------------------
   276                              <1>  
   277                              <1> _printint:  
   278 0000022E 55                  <1>             push rbp                            ; PROLOGUE 
   279 0000022F 4889E5              <1>             mov rbp, rsp                        ;
   280                              <1> 
   281 00000232 488B4510            <1>             mov rax, [rbp+16]                   ; get num
   282 00000236 4883F800            <1>             cmp rax, 0                          ; find out sign
   283 0000023A 7D29                <1>             jge .to_unsint
   284                              <1>             
   285 0000023C 48FFC8              <1>             dec rax                             ; rax = |rax|
   286 0000023F 48F7D0              <1>             not rax  
   287                              <1> 
   288 00000242 53                  <1>             push rbx                            ; save regs                         
   289 00000243 50                  <1>             push rax
   290                              <1> 
   291 00000244 B32D                <1>             mov bl, '-'
   292 00000246 480FB6DB            <1>             movzx rbx, bl          
   293 0000024A 53                  <1>             push rbx
   294                              <1> 
   295 0000024B 4889E6              <1>             mov rsi, rsp                        ; get ptr to text
   296 0000024E BA01000000          <1>             mov rdx, 1                          ; get line len 
   297 00000253 B801000000          <1>             mov rax, 1                          ; out text
   298 00000258 BF01000000          <1>             mov rdi, 1       
   299 0000025D 0F05                <1>             syscall
   300                              <1> 
   301 0000025F 4883C408            <1>             add rsp, 8
   302 00000263 58                  <1>             pop rax                             ; load saved regs
   303 00000264 5B                  <1>             pop rbx                             
   304                              <1> 
   305 00000265 50                  <1> .to_unsint: push rax
   306 00000266 E871FFFFFF          <1>             call _printunsint
   307 0000026B 4883C008            <1>             add rax, 8
   308                              <1> 
   309 0000026F 4889EC              <1>             mov rsp, rbp                        ; PROLOGUE  
   310 00000272 5D                  <1>             pop rbp                            
   311 00000273 C3                  <1>             ret
   312                              <1> ;-------------------------------------------------------------------------------------------------
   313                              <1> ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   314                              <1> ;-------------------------------------------------------------------------------------------------
   315                              <1> ;   _printhex (stdcall) - long long int 
   316                              <1> ;-------------------------------------------------------------------------------------------------
   317                              <1> ;   Needs:                  your number in stack
   318                              <1> ;   Return:                 none
   319                              <1> ;   Destroy list:           rax, rcx, rdx, r8, r9
   320                              <1> ;-------------------------------------------------------------------------------------------------
   321                              <1>  
   322                              <1> _printhex:  
   323 00000274 55                  <1>             push rbp                            ; PROLOGUE 
   324 00000275 4889E5              <1>             mov rbp, rsp                        ;
   325                              <1> 
   326 00000278 4883EC0F            <1>             sub rsp, 15                         ; reserve 15 bytes in stack
   327                              <1> 
   328 0000027C 488B4510            <1>             mov rax, [rbp+16]                   ; get num
   329 00000280 4831D2              <1>             xor rdx, rdx
   330                              <1> 
   331 00000283 4D31C9              <1>             xor r9, r9                          ; num len
   332 00000286 4989E8              <1>             mov r8, rbp                         ; curr pos in array
   333 00000289 49FFC8              <1>             dec r8
   334                              <1> 
   335                              <1> ; translate num to line
   336                              <1> 
   337 0000028C 4889C2              <1> .next_num:  mov rdx, rax
   338 0000028F 4883E20F            <1>             and rdx, 15
   339 00000293 48C1E804            <1>             shr rax, 4
   340                              <1> 
   341 00000297 4883FA0A            <1>             cmp rdx, 10
   342 0000029B 7306                <1>             jae .sym_case
   343                              <1> 
   344 0000029D 4883C230            <1>             add rdx, '0'                        ; num case
   345 000002A1 EB08                <1>             jmp .skip
   346                              <1> 
   347 000002A3 4883EA0A            <1> .sym_case:  sub rdx, 10
   348 000002A7 4883C241            <1>             add rdx, 'A'
   349                              <1>                                     
   350 000002AB 418810              <1> .skip       mov byte [r8], dl
   351 000002AE 49FFC8              <1>             dec r8                              ; mov to next number in our array
   352 000002B1 49FFC1              <1>             inc r9
   353 000002B4 4831D2              <1>             xor rdx, rdx  
   354 000002B7 4883F800            <1>             cmp rax, 0
   355 000002BB 77CF                <1>             ja .next_num  
   356                              <1> 
   357 000002BD 49FFC0              <1>             inc r8
   358 000002C0 4C89C9              <1>             mov rcx, r9
   359                              <1> 
   360 000002C3 4C89C6              <1>             mov rsi, r8                         ; get ptr to text
   361 000002C6 4C89CA              <1>             mov rdx, r9                         ; get line len 
   362 000002C9 B801000000          <1>             mov rax, 1                          ; out text
   363 000002CE BF01000000          <1>             mov rdi, 1       
   364 000002D3 0F05                <1>             syscall 
   365                              <1> 
   366 000002D5 4889EC              <1>             mov rsp, rbp                        ; PROLOGUE  
   367 000002D8 5D                  <1>             pop rbp                            
   368 000002D9 C3                  <1>             ret
   369                              <1> ;-------------------------------------------------------------------------------------------------
   370                              <1> ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   371                              <1> ;-------------------------------------------------------------------------------------------------
   372                              <1> ;   _printbin (stdcall) - long long int 
   373                              <1> ;-------------------------------------------------------------------------------------------------
   374                              <1> ;   Needs:                  your number in stack
   375                              <1> ;   Return:                 none
   376                              <1> ;   Destroy list:           rax, rcx, rdx, r8, r9
   377                              <1> ;-------------------------------------------------------------------------------------------------
   378                              <1>  
   379                              <1> _printbin:  
   380 000002DA 55                  <1>             push rbp                            ; PROLOGUE 
   381 000002DB 4889E5              <1>             mov rbp, rsp                        ;
   382                              <1> 
   383 000002DE 4883EC0F            <1>             sub rsp, 15                         ; reserve 15 bytes in stack
   384                              <1> 
   385 000002E2 488B4510            <1>             mov rax, [rbp+16]                   ; get num
   386 000002E6 4831D2              <1>             xor rdx, rdx
   387                              <1> 
   388 000002E9 4D31C9              <1>             xor r9, r9                          ; num len
   389 000002EC 4989E8              <1>             mov r8, rbp                         ; curr pos in array
   390 000002EF 49FFC8              <1>             dec r8
   391                              <1> 
   392                              <1> ; translate num to line
   393                              <1> 
   394 000002F2 4889C2              <1> .next_num:  mov rdx, rax
   395 000002F5 4883E201            <1>             and rdx, 1
   396 000002F9 48D1E8              <1>             shr rax, 1
   397                              <1> 
   398 000002FC 4883C230            <1>             add rdx, '0'                        ; save num
   399 00000300 418810              <1>             mov byte [r8], dl
   400 00000303 49FFC8              <1>             dec r8                              ; mov to next number in our array
   401 00000306 49FFC1              <1>             inc r9
   402 00000309 4831D2              <1>             xor rdx, rdx  
   403 0000030C 4883F800            <1>             cmp rax, 0
   404 00000310 77E0                <1>             ja .next_num  
   405                              <1> 
   406 00000312 49FFC0              <1>             inc r8
   407 00000315 4C89C9              <1>             mov rcx, r9
   408                              <1> 
   409 00000318 4C89C6              <1>             mov rsi, r8                         ; get ptr to text
   410 0000031B 4C89CA              <1>             mov rdx, r9                         ; get line len 
   411 0000031E B801000000          <1>             mov rax, 1                          ; out text
   412 00000323 BF01000000          <1>             mov rdi, 1       
   413 00000328 0F05                <1>             syscall 
   414                              <1> 
   415 0000032A 4889EC              <1>             mov rsp, rbp                        ; PROLOGUE  
   416 0000032D 5D                  <1>             pop rbp                            
   417 0000032E C3                  <1>             ret
   418                              <1> ;-------------------------------------------------------------------------------------------------
   419                              <1> ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   420                              <1> ;-------------------------------------------------------------------------------------------------
     5                                  
     6                                  global _start
     7                                  
     8                                  section .text
     9                                  
    10                                  _start:
    11 0000032F 48BE-                             mov rsi, args                 ;get ptr to args array
    11 00000331 [7300000000000000] 
    12 00000339 48BF-                             mov rdi, format_line          ;get ptr to format line
    12 0000033B [0000000000000000] 
    13 00000343 56                                push rsi                      ;push args
    14 00000344 57                                push rdi
    15 00000345 E820FEFFFF                        call _printtrl                ;call print
    16 0000034A 4883C410                          add rsp, 8*2                  ;clear stk
    17                                  
    18 0000034E B83C000000                        mov rax, 60       
    19 00000353 BF00000000                        mov rdi, 0                    ;EXIT
    20 00000358 0F05                              syscall           
    21                                  
    22                                  section .data
    23                                  
    24                                  format_line:  
    25 00000000 54455354533A207374-               db "TESTS: str %s, %s, %s, Now symbols: %c, %c, %c, Then bin: %b, %b, Of course unsigned: %o %o, In the end int: %d %d", 10
    25 00000009 722025732C2025732C-
    25 00000012 2025732C204E6F7720-
    25 0000001B 73796D626F6C733A20-
    25 00000024 25632C2025632C2025-
    25 0000002D 632C205468656E2062-
    25 00000036 696E3A2025622C2025-
    25 0000003F 622C204F6620636F75-
    25 00000048 72736520756E736967-
    25 00000051 6E65643A20256F2025-
    25 0000005A 6F2C20496E20746865-
    25 00000063 20656E6420696E743A-
    25 0000006C 2025642025640A     
    26 00000073 54524F4C4C310A5452-     args:     db "TROLL1", 10, "TROLL2", 10, "TROLL3", 10 
    26 0000007C 4F4C4C320A54524F4C-
    26 00000085 4C330A             
    27 00000088 414243                            db 'A', 'B', 'C' 
    28 0000008B 640000002C010000                  dd 100, 300 
    29 00000093 458D08001C5B0000                  dd 560453, 23324 
    30 0000009B A0860100CAFDFFFF                  dd 100000, -566    
    31                                  ;-------------------------------------------------------------------------------------------------
    32                                  ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    33                                  ;-------------------------------------------------------------------------------------------------
